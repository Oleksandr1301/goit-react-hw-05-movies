{"version":3,"file":"static/js/34.589fa3e9.chunk.js","mappings":"8TAGMA,EAAM,mCAEZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,oGACFD,EAAAA,EAAAA,IAAA,qCAAwCD,IADtC,cACnBG,EADmB,yBAElBA,EAASC,KAAKC,SAFI,2CAAH,qDAKXC,EAAQ,mCAAG,WAAMC,GAAN,uFAECN,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,kBAA+CO,IAFhD,cAEhBJ,EAFgB,yBAKfA,EAASC,MALM,2CAAH,sDAQRI,EAAU,mCAAG,WAAMC,GAAN,uFACDR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,oBAAsCT,IADrC,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAMVM,EAAO,mCAAG,WAAMD,GAAN,uFACER,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAA8CT,IADhD,cACfG,EADe,yBAEdA,EAASC,KAAKO,MAFA,2CAAH,sDAKPC,EAAU,mCAAG,WAAMH,GAAN,uFACDR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,4BAA8CT,IAD7C,cAClBG,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAKvBH,EAAYW,UAAY,CACtBC,OAAQC,IAAAA,OAAAA,W,2HCLV,EA9BmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,4CACA,wBAEGF,EAAOG,KAAI,SAAAC,GACV,IAAIC,EAOJ,OALIA,EADED,EAAME,YACE,0CAAsCF,EAAME,aAGpD,gFAGJ,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaH,EAAMI,IAAMC,MAAO,CAAEC,KAAMT,GAAhD,WACE,gBAAKU,IAAKN,EAAYO,MAAM,MAAMC,IAAKT,EAAMU,QAC9CV,EAAMU,UAHAV,EAAMI,GAQlB,QAIR,ECuCD,EA/De,WAAO,IAAD,EACnB,GAAwCO,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAE3C,GAA2BC,EAAAA,EAAAA,UAAS,MAApC,eAAOpB,EAAP,KAAeqB,EAAf,KACA,GAAoCD,EAAAA,EAAAA,UAAS,MAA7C,eAAOE,EAAP,KAAmBC,EAAnB,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAAsCL,EAAAA,EAAAA,UAASF,GAA/C,eAAOQ,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACM,KAAVV,IAEJG,EAAS,MACTE,EAAc,MACdE,GAAW,IAEXnC,EAAAA,EAAAA,IAAS4B,GACNW,MAAK,SAAAzC,GACJiC,EAASjC,EAAKC,SACdkC,EAAcnC,EAAK0C,eACnBL,GAAW,EACZ,IACAM,MAAMC,QAAQC,KAClB,GAAE,CAACf,IAcJ,OACE,iCACE,kBAAMgB,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IACMC,EADOF,EAAEG,OACcpB,MAAMqB,MAAMC,cAAcC,OAEvDxB,EAAgB,CAAEC,MAAOmB,GAC1B,EAIG,WACE,kBACEK,KAAK,OACLC,KAAK,QACLJ,MAAOb,EACPkB,SAnBkB,SAAAT,GACxBR,EAAeQ,EAAEU,cAAcN,MAChC,EAkBOO,YAAY,sBAGd,mBAAQJ,KAAK,SAAb,uBAGDlB,IACC,0BACE,wCAGHxB,IAAU,SAAC,EAAD,CAAYA,OAAQA,IAEf,IAAfsB,IAAoB,gDAG1B,C","sources":["components/fetchFilms.jsx","components/MoviesList.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst KEY = '5df8195cde59490a98b624cfb815be7a';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const getQuery = async searchQuery => {\n  // console.log(searchQuery);\n  const response = await axios.get(`search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  // console.log(response);\n  return response.data;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}?api_key=${KEY}`);\n  return response.data;\n};\n\n\nexport const getCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?api_key=${KEY}`);\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}`);\n  return response.data.results;\n};\n\ngetTrending.propTypes = {\n  search: PropTypes.string.isRequired,\n};","import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <h1>Tranding Today</h1>\n      <ul>\n        \n        {movies.map(movie => {\n          let posterPath;\n            if (movie.poster_path) {\n              posterPath = `https://image.tmdb.org/t/p/w400/${movie.poster_path}`;\n            } else {\n              posterPath =\n                'https://i.pinimg.com/originals/a0/57/48/a05748c84d7093e382c560bbc57665ce.jpg';\n          }\n          return (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                <img src={posterPath} width=\"400\" alt={movie.title} />\n              {movie.title}\n            </Link>\n          </li>\n          )\n          \n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default MoviesList;","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getQuery } from '../components/fetchFilms';\nimport MoviesList from '../components/MoviesList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const [movies, setMovie] = useState(null);\n  const [totalMovie, setTotalMovie] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [inputSearch, setInputSearch] = useState(query);\n\n  useEffect(() => {\n    if (query === '') return;\n\n    setMovie(null);\n    setTotalMovie(null);\n    setLoading(true);\n\n    getQuery(query)\n      .then(data => {\n        setMovie(data.results);\n        setTotalMovie(data.total_results);\n        setLoading(false);\n      })\n      .catch(console.log);\n  }, [query]);\n\n  const handleInputChange = e => {\n    setInputSearch(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const queryNormalized = form.query.value.toLowerCase().trim();\n\n    setSearchParams({ query: queryNormalized });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={inputSearch}\n          onChange={handleInputChange}\n          placeholder=\"Enter movie name\"\n        />\n\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {loading && (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )}\n      {movies && <MoviesList movies={movies} />}\n\n      {totalMovie === 0 && <div>Not found movies</div>}\n    </>\n  );\n};\n\nexport default Movies;"],"names":["KEY","axios","getTrending","response","data","results","getQuery","searchQuery","getDetails","movieId","getCast","cast","getReviews","propTypes","search","PropTypes","movies","location","useLocation","map","movie","posterPath","poster_path","to","id","state","from","src","width","alt","title","useSearchParams","searchParams","setSearchParams","query","get","useState","setMovie","totalMovie","setTotalMovie","loading","setLoading","inputSearch","setInputSearch","useEffect","then","total_results","catch","console","log","onSubmit","e","preventDefault","queryNormalized","target","value","toLowerCase","trim","type","name","onChange","currentTarget","placeholder"],"sourceRoot":""}